plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
	platformSetupLoomIde()
	fabric()
}
loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}
configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}
dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
	common(project(path: ":common", configuration: "namedElements")) {
		transitive false
	}
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
		transitive false
	}

	// Architectury-api
	modImplementation "dev.architectury:architectury-fabric:${architectury_version}"
	// MixinExtras
	include implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${fabric_mixin_extras_version}"))
	// Cloth Config API
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_api_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: 'modmenu'
	}
	// YACL
	modImplementation "dev.isxander:yet-another-config-lib:${yacl_mc_version}-fabric"
	// ModMenu
	modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
}
shadowJar {
	exclude "architectury.common.json"
	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}
remapJar {
	injectAccessWidener = true
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
}
sourcesJar {
	Task commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map {
		zipTree(it)
	}
}
base {
	archivesName = rootProject.archiveFileNameOfLoader("fabric")
	version = ""
}
components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}
publishing {
	publications {}
	repositories {}
}
